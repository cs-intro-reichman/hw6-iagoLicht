// Source code is decompiled from a .class file using FernFlower decompiler.
import java.awt.Color;

public class Runigram {
   public Runigram() {
   }

   public static void main(String[] var0) {
      System.out.println("testing read: ");
      Color[][] var1 = read("tinypic.ppm");
      print(var1);
      System.out.println();
      System.out.println("testing flippedHorizontally: ");
      Color[][] var2 = flippedHorizontally(var1);
      System.out.println();
      print(var2);
      System.out.println();
      System.out.println("testing scaled: ");
      print(scaled(var1, 3, 5));
   }

   public static Color[][] read(String var0) {
      In var1 = new In(var0);
      var1.readString();
      int var2 = var1.readInt();
      int var3 = var1.readInt();
      var1.readInt();
      Color[][] var4 = new Color[var3][var2];

      for(int var5 = 0; var5 < var4.length; ++var5) {
         for(int var6 = 0; var6 < var4[0].length; ++var6) {
            var4[var5][var6] = new Color(var1.readInt(), var1.readInt(), var1.readInt());
         }
      }

      return var4;
   }

   private static void print(Color var0) {
      System.out.print("(");
      System.out.printf("%3s,", var0.getRed());
      System.out.printf("%3s,", var0.getGreen());
      System.out.printf("%3s", var0.getBlue());
      System.out.print(")  ");
   }

   private static void print(Color[][] var0) {
      for(int var1 = 0; var1 < var0.length; ++var1) {
         for(int var2 = 0; var2 < var0[0].length; ++var2) {
            print(var0[var1][var2]);
         }
      }

   }

   public static Color[][] flippedHorizontally(Color[][] var0) {
      Color[][] var1 = new Color[var0.length][var0[0].length];

      for(int var2 = 0; var2 < var1.length; ++var2) {
         for(int var3 = 0; var3 < var1[0].length; ++var3) {
            var1[var2][var3] = var0[var2][var0[0].length - 1 - var3];
         }
      }

      return var1;
   }

   public static Color[][] flippedVertically(Color[][] var0) {
      Color[][] var1 = new Color[var0.length][var0[0].length];

      for(int var2 = 0; var2 < var1.length; ++var2) {
         for(int var3 = 0; var3 < var1[0].length; ++var3) {
            var1[var2][var3] = var0[var0.length - 1 - var2][var3];
         }
      }

      return var1;
   }

   private static Color luminance(Color var0) {
      int var1 = (int)((double)var0.getRed() * 0.299 + (double)var0.getGreen() * 0.587 + (double)var0.getBlue() * 0.114);
      Color var2 = new Color(var1, var1, var1);
      return var2;
   }

   public static Color[][] grayScaled(Color[][] var0) {
      Color[][] var1 = new Color[var0.length][var0[0].length];

      for(int var2 = 0; var2 < var1.length; ++var2) {
         for(int var3 = 0; var3 < var1[0].length; ++var3) {
            var1[var2][var3] = luminance(var0[var2][var3]);
         }
      }

      return var1;
   }

   public static Color[][] scaled(Color[][] var0, int var1, int var2) {
      Color[][] var3 = new Color[var2][var1];
      int var4 = var0.length;
      int var5 = var0[0].length;

      for(int var6 = 0; var6 < var3.length; ++var6) {
         for(int var7 = 0; var7 < var3[0].length; ++var7) {
            var3[var6][var7] = var0[(int)((double)var6 * ((double)var4 / (double)var2))][(int)((double)var7 * ((double)var5 / (double)var1))];
         }
      }

      return var3;
   }

   public static Color blend(Color var0, Color var1, double var2) {
      int var4 = (int)(var2 * (double)var0.getRed() + (1.0 - var2) * (double)var1.getRed());
      int var5 = (int)(var2 * (double)var0.getGreen() + (1.0 - var2) * (double)var1.getGreen());
      int var6 = (int)(var2 * (double)var0.getBlue() + (1.0 - var2) * (double)var1.getBlue());
      Color var7 = new Color(var4, var5, var6);
      return var7;
   }

   public static Color[][] blend(Color[][] var0, Color[][] var1, double var2) {
      Color[][] var4 = new Color[var0.length][var0[0].length];

      for(int var5 = 0; var5 < var4.length; ++var5) {
         for(int var6 = 0; var6 < var4[0].length; ++var6) {
            var4[var5][var6] = blend(var0[var5][var6], var1[var5][var6], var2);
         }
      }

      return var4;
   }

   public static void morph(Color[][] var0, Color[][] var1, int var2) {
      if (var0.length != var1.length || var0[0].length != var1[0].length) {
         var1 = scaled(var1, var0[0].length, var0.length);
      }

      for(int var3 = 0; var3 <= var2; ++var3) {
         display(var0);
         StdDraw.pause(500);
         var0 = blend(var0, var1, (double)(var2 - var3) / (double)var2);
      }

   }

   public static void setCanvas(Color[][] var0) {
      StdDraw.setTitle("Runigram 2023");
      int var1 = var0.length;
      int var2 = var0[0].length;
      StdDraw.setCanvasSize(var2, var1);
      StdDraw.setXscale(0.0, (double)var2);
      StdDraw.setYscale(0.0, (double)var1);
      StdDraw.enableDoubleBuffering();
   }

   public static void display(Color[][] var0) {
      int var1 = var0.length;
      int var2 = var0[0].length;

      for(int var3 = 0; var3 < var1; ++var3) {
         for(int var4 = 0; var4 < var2; ++var4) {
            StdDraw.setPenColor(var0[var3][var4].getRed(), var0[var3][var4].getGreen(), var0[var3][var4].getBlue());
            StdDraw.filledSquare((double)var4 + 0.5, (double)(var1 - var3) - 0.5, 0.5);
         }
      }

      StdDraw.show();
   }
}
